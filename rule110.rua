#!/usr/bin/env rua
local sdl = require 'ffi.req' 'sdl'
local ig = require 'imgui'
local gl = require 'gl'
local template = require 'template'
local vec3ub = require 'vec-ffi.vec3ub'
local vec2d = require 'vec-ffi.vec2d'
local matrix_ffi = require 'matrix.ffi'
local Image = require 'image'
local glreport = require 'gl.report'
local GLPingPong = require 'gl.pingpong'
local GLTex2D = require 'gl.tex2d'
local GLArrayBuffer = require 'gl.arraybuffer'
local GLAttribute = require 'gl.attribute'
local GLVertexArray = require 'gl.vertexarray'
local GLProgram = require 'gl.program'
local GLGeometry = require 'gl.geometry'
local GLSceneObject = require 'gl.sceneobject'

-- isle of misfits:
local clnumber = require 'cl.obj.number'

local gridsize = assert(tonumber(arg[2] or 1024))

local App = require 'imguiapp.withorbit'()
App.viewUseBuiltinMatrixMath = true

App.title = 'Rule 110'

local pingpong
local updateShader
local displayShader

local bufferCPU = ffi.new('int[?]', gridsize * gridsize)

local colors = {
	vec3ub(0,0,0),
	vec3ub(0,255,255),
	vec3ub(255,255,0),
	vec3ub(255,0,0),
}

local reset = [] do
	ffi.fill(bufferCPU, ffi.sizeof'int' * gridsize * gridsize)
	for i=0,gridsize*gridsize-1 do
		--bufferCPU[i] = math.random(0,1) * -1
		--bufferCPU[i] = math.random(0xffffffff)
	end
	bufferCPU[(gridsize >> 1) + gridsize * (gridsize - 1)] = -1
	pingpong:prev()
		:bind()
		:subimage{data=bufferCPU}
		:unbind()
end

App.initGL = [:] do
	App.super.initGL(self)

	self.view.ortho = true
	self.view.orthoSize = 1
	self.view.pos:set(0, 0, 1)

	self.pingPongProjMat = matrix_ffi({4,4}, 'float'):zeros():setOrtho(-1, 1, -1, 1, -1, 1)

	gl.glClearColor(.2, .2, .2, 0)

	pingpong = GLPingPong{
		width = gridsize,
		height = gridsize,
		internalFormat = gl.GL_RGBA8,
		format = gl.GL_RGBA,
		type = gl.GL_UNSIGNED_BYTE,
		magFilter = gl.GL_LINEAR,
		minFilter = gl.GL_LINEAR,
		--minFilter = gl.GL_LINEAR_MIPMAP_LINEAR,
		--generateMipmap = true,
		wrap = {
			s = gl.GL_REPEAT,
			t = gl.GL_REPEAT,
		}
	}
	reset()

	self.vtxBufferDim = 2
	local vtxs = {
		0, 0,
		1, 0,
		0, 1,
		1, 1,
	}
	self.vtxBufferCount = #vtxs / self.vtxBufferDim
	self.vtxBuffer = GLArrayBuffer{data = vtxs}:unbind()

	updateShader = GLProgram{
		vertexCode =
GLProgram.getVersionPragma()..'\n'
..[[
uniform mat4 mvProjMat;
in vec2 vtx;
out vec2 tc;
void main() {
	tc = vtx;
	gl_Position = mvProjMat * vec4(vtx * 2. - 1., 0., 1.);
}
]],
		fragmentCode = template(
GLProgram.getVersionPragma()..'\n'
..[[
in vec2 tc;
out vec4 fragColor;
uniform sampler2D tex;

const float gridsize = <?=clnumber(gridsize)?>;
const float du = <?=clnumber(du)?>;

void main() {
	if (floor(tc.y * gridsize) < gridsize - 1.) {
		fragColor = texture(tex, tc + vec2(0, du));
	} else {
		//sum neighbors
		float v = floor(.5 + texture(tex, tc + vec2(du, 0)).r)
			+ 2. * floor(.5 + texture(tex, tc + vec2(0, 0)).r)
			+ 4. * floor(.5 +  texture(tex, tc + vec2(-du, 0)).r);

		if (v == 1. || v == 2. || v == 3. || v == 5. || v == 6.) {
			fragColor = vec4(1.);
		} else {
			fragColor = vec4(0.);
		}
	}
}
]],			{
				clnumber = clnumber,
				gridsize = gridsize,
				du = 1 / gridsize,
			}
		),
		uniforms = {
			tex = 0,
		},
	}:useNone()

	self.quadGeom = GLGeometry{
		mode = gl.GL_TRIANGLE_STRIP,
		count = self.vtxBufferCount,
	}

	self.updateSceneObj = GLSceneObject{
		program = updateShader,
		geometry = self.quadGeom,
		attrs = {
			vtx = self.vtxBuffer,
		},
	}

	displayShader = GLProgram{
		vertexCode =
GLProgram.getVersionPragma()..'\n'
..[[
uniform mat4 mvProjMat;
in vec2 vtx;
out vec2 tc;
void main() {
	tc = vtx;
	gl_Position = mvProjMat * vec4(vtx * 2. - 1., 0., 1.);
}
]],
		fragmentCode =
GLProgram.getVersionPragma()..'\n'
..[[
in vec2 tc;
out vec4 fragColor;
uniform sampler2D tex;
void main() {
	fragColor = texture(tex, tc);
}
]],
		uniforms = {
			tex = 0,
		},
	}:useNone()

	self.drawSceneObj = GLSceneObject{
		program = displayShader,
		geometry = self.quadGeom,
		attrs = {
			vtx = self.vtxBuffer,
		},
	}

	glreport 'here'
end

-- hmm wish there was an easier way to do this
local vec3d_to_vec2d = [v] vec2d(v.x, v.y)

local value = ffi.new('int[1]', 0)
App.update = [:] do
	local ar = self.width / self.height

	local canHandleMouse = not ig.igGetIO()[0].WantCaptureMouse
	if canHandleMouse then
		if self.mouse.rightDown then
			local pos = (vec3d_to_vec2d(self.mouse.pos) - vec2d(.5, .5)) * (2 * self.view.orthoSize)
			pos.x *= ar
			pos = ((pos + vec3d_to_vec2d(self.view.pos)) * .5 + vec2d(.5, .5)) * gridsize
			local x = math.floor(pos.x + .5)
			local y = math.floor(pos.y + .5)
			if x >= 0 and x < gridsize and y >= 0 and y < gridsize then
				pingpong:draw{
					callback = [] do
						gl.glReadPixels(x, gridsize-1, 1, 1, gl.GL_RGBA, gl.GL_UNSIGNED_BYTE, value)
						value[0] = value[0] == 0 ? -1 : 0
					end,
				}
				pingpong:prev()
					:bind()
					:subimage{xoffset=x, yoffset=gridsize-1, width=1, height=1, data=value}
					:unbind()
			end
		end
	end

	-- update
	pingpong:draw{
		viewport = {0, 0, gridsize, gridsize},
		callback = [] do
			gl.glClear(gl.GL_COLOR_BUFFER_BIT)
			self.updateSceneObj.texs[1] = pingpong:prev()
			self.updateSceneObj.uniforms.mvProjMat = self.pingPongProjMat.ptr
			self.updateSceneObj:draw()
		end,
	}
	pingpong:swap()

	gl.glClear(gl.GL_COLOR_BUFFER_BIT)

	self.drawSceneObj.texs[1] = pingpong:cur()
	self.drawSceneObj.uniforms.mvProjMat = self.view.mvProjMat.ptr
	self.drawSceneObj:draw()

	App.super.update(self)
end

App.updateGUI = [:] do
	if ig.igButton'Save' then
		pingpong:prev():bind(0)	-- prev? shouldn't this be cur?
		gl.glGetTexImage(gl.GL_TEXTURE_2D, 0, gl.GL_RGBA, gl.GL_UNSIGNED_BYTE, bufferCPU)
		pingpong:prev():unbind(0)
		Image(gridsize, gridsize, 3, 'unsigned char', [x, y]
			colors[1 + tonumber(bufferCPU[x + gridsize * y]) % modulo]:unpack()
		):save'output.glsl.png'
	end

	ig.igSameLine()

	if ig.igButton'Load' then
		local image = Image'output.glsl.png'
		asserteq(image.width, gridsize)
		asserteq(image.height, gridsize)
		asserteq(image.channels, 3)
		for y=0,image.height-1 do
			for x=0,image.width-1 do
				local rgb = image.buffer + ((x + image.width * y) << 2)
				for i,color in ipairs(colors) do
					if rgb[0] == color.x
					and rgb[1] == color.y
					and rgb[2] == color.z
					then
						bufferCPU[x + gridsize * y] = i-1
						break
					end
					if i == #colors then
						error("unknown color")
					end
				end
			end
		end
		pingpong:prev()
			:bind()
			:subimage{data=bufferCPU}
			:unbind()
	end

	ig.igSameLine()

	if ig.igButton'Reset' then
		reset()
	end

	glreport'here'
end

return App():run()
